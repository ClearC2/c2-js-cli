#!/usr/bin/env node

/* eslint-disable */
const program = require('commander')
const fs = require('fs')
const path = require('path')

program
  .option('-c, --container', 'Create container')
  .parse(process.argv);

if (!program.args.length) {
  console.error('Component name required')
  process.exit(1)
}
const componentName = program.args[0]
const componentDir = path.resolve(`./${componentName}`)
const componentFile = `${componentDir}/${componentName}.js`
const componentTestDir = `${componentDir}/__tests__`
const componentTestFile = `${componentTestDir}/${componentName}.test.js`
const containerFile = `${componentDir}/${componentName}Container.js`
const containerTestFile = `${componentTestDir}/${componentName}Container.test.js`
const selectorFile = `${componentDir}/selector.js`
const indexFile = `${componentDir}/index.js`

// create directory
try {
  fs.mkdirSync(path.resolve(`./${componentName}`))
} catch (err) {
  console.error('Already exists')
  process.exit(1)
}

const componentContent = `import React from 'react'
import PropTypes from 'prop-types'\n
function ${componentName} () {
  return (
    <div />
  )
}

${componentName}.propTypes = {
  change: PropTypes.string
}

export default ${componentName}
`

// create component file
try {
  fs.writeFileSync(componentFile, componentContent)
} catch (err) {
  console.error('Could not create component file.')
  process.exit(1)
}

// create test directory
try {
  fs.mkdirSync(path.resolve(componentTestDir))
} catch (err) {
  console.error('Error creating test dir')
  process.exit(1)
}

const testContent = `import React from 'react'
import {render} from 'react-testing-library'
import ${componentName} from '../${componentName}'

describe('${componentName}', () => {
  it('should render', async () => {
    const {container} = render(<${componentName} />)
    expect(container.querySelector('div')).toBeInTheDocument()
  })
})
`

// create component test file
try {
  fs.writeFileSync(componentTestFile, testContent)
} catch (err) {
  console.error('Could not create component test file.')
  process.exit(1)
}

if (program.container) {
  // create selector file
  const selectorContent = `function selector (state, props) {
  return {}
}

export default selector
`
  try {
    fs.writeFileSync(selectorFile, selectorContent)
  } catch (err) {
    console.error('Could not create selector file.')
    process.exit(1)
  }

  const containerContent = `import React from 'react'
import PropTypes from 'prop-types'
import {connect} from 'react-redux'
import ${componentName} from './${componentName}'
import selector from './selector'\n
function ${componentName}Container (props) {
  return (
    <${componentName} {...props} />
  )
}

${componentName}Container.propTypes = {
  change: PropTypes.string
}

export default connect(selector)(${componentName}Container)
`
  // create container file
  try {
    fs.writeFileSync(containerFile, containerContent)
  } catch (err) {
    console.error('Could not create container file.')
    process.exit(1)
  }

  const containerTestContent = `import React from 'react'
import {render} from 'react-testing-library'
import ${componentName}Container from '../${componentName}Container'

describe('${componentName}Container', () => {
  it('should render', async () => {
    const {container} = render(<${componentName}Container />)
    expect(container.querySelector('div')).toBeInTheDocument()
  })
})
`

  // create container test file
  try {
    fs.writeFileSync(containerTestFile, containerTestContent)
  } catch (err) {
    console.error('Could not create container test file.')
    process.exit(1)
  }
}

const indexContent = `export {default} from './${componentName}${program.container ? 'Container' : ''}'
`

// create index file
try {
  fs.writeFileSync(indexFile, indexContent)
} catch (err) {
  console.error('Could not create index file.')
  process.exit(1)
}

console.log(`Created ${program.container ? 'container' : 'component'} ${componentName}`)
console.log(componentFile)
console.log(indexFile)
console.log(componentTestFile)
if (program.container) {
  console.log(containerFile)
  console.log(selectorFile)
  console.log(containerTestFile)
}
